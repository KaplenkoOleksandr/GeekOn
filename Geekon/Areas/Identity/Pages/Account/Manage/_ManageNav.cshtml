@inject SignInManager<IdentityUser> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}
<ul>
    <li class="user-button"><a class="user-item @ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index"><i class='bx bx-user user-icon'></i>Profile</a></li>
    <li class="user-button"><a class="user-item @ManageNavPages.EmailNavClass(ViewContext)" id="email" asp-page="./Email"><i class='bx bx-envelope user-icon'></i>Email</a></li>
    <li class="user-button"><a class="user-item @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword"><i class='bx bxs-key user-icon'></i>Password</a></li>
    @*@if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">External logins</a></li>
    }*@
    @*<li class="nav-item"><a class="nav-link @ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)" id="two-factor" asp-page="./TwoFactorAuthentication">Two-factor authentication</a></li>
    <li class="nav-item"><a class="nav-link @ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData">Personal data</a></li>*@
</ul>
